SELECT문은 항상 SELECT 절과 FROM절을 같이 기술합니다.
다른 조건이 추가로 필요하다면 WHERE절에 기술하고 데이터가 출력되는 순서를 정하려면
ORDER BY절을 기술합니다.

SELECT [DISTINCT] 열 이름 [or 별칭]
FROM 테이블이름
[WHERE 조건식]
[ORDER BY 열 이름 [ASC or DESC]];

1. SELECT는 예약어이면서 열을 선택하기 위한 명령어입니다.
2. 대괄호 [] 안에 들어간 항목은 선택 사항으로 생략할 수 있습니다.
3. 문장을 모두 작성했다면 문장이 끝났다는 의미로 세미콜론을 입력합니다.
    만약, 세미콜론이 없다면 SQL문이 아직 끝나지 않았다고 판단합니다.    
    단, SQL 문장이 하나뿐이라면 세미콜론을 입력하지 않아도 SQL문이 실행됩니다.

✅ SQL문 작성 규칙
1. SQL문은 대문자와 소문자를 구별하지 않습니다. (SELECT === select)
2. SQL문은 한 줄 또는 여러 줄로 작성할 수 있습니다.
    - 가독성과 편집의 용이성을 위해 내요잉 달라지면 줄을 나눕니다.
    - 명령어는 여러 줄로 나눌 수 없습니다. SE LECT (X)
3. 코드 수준에 따른 들여쓰기는 SQL문장을 좀 더 읽기 쉽게 합니다.
4. 명령어를 대문자로 작성하고 나머지를 소문자로 작성하면 가독성이 좋아집니다.

✅ 전체 데이터 조회하기
SELECT 명령어는 데이터를 선택(=조회)한다는 의미이며, 단지 선택된 데이터를 화면에 출력한다는 것입니다.
출력만 할 뿐 실제 데이터의 값이 데이터베이스에 반영(삽입, 삭제, 갱신)되지 않습니다.

SELECT * 
FROM employees;
- SELECT 명령어 다음 별표를 입력해서 모든 열을 조회합니다. (*은 모든 열 이라는 의미)
- FROM은 ~의 테이블로부터 라는 의미이므로 바로 뒤에 테이블 이름을 기술합니다.

✅ 원하는 열만 조회하고 정렬하기
SELECT employee_id, first_name_ last_name
FROM employees;
- 3종류의 컬럼(employee_id, first_name_ last_name)에 대한 모든 row를 선택
- 열 이름은 쉼표(,)를 붙여 계속해서 나열할 수 있으며 결과는 나열한 순서대로 출력됩니다.
- 모든 열을 조회하는 * 대신 열 이름을 모두 나열해도 같은 결과가 출력됩니다.

⭕ ORDER BY
ORDER BY 명령문을 사용하면 행에 대해 정렬 순서를 지정할 수 있습니다.
ORDER BY 열 이름 [ASC or DESC]
- ASC : 오름차순 정렬, 기본 정렬 방법이므로 ASC를 입력하지 않아도 오름차순으로 정렬
- DESC : 내림차순 정렬

컬럼별로 순서를 지정할 수 있습니다.
- ORDER BY 열 이름, 열 이름 DESC, 열 이름 ASC

✔ TIP
- 고객별 매출을 출력할 때 매출이 높은 순(내림차순)으로 데이터를 정렬하면 중요한 고객이 누구인지 확인하기 좋습니다.
- 고객의 거주지별 매출액 순서로 정렬하고자 할 때 거주지를 가나다순으로 정렬하고 매출액이 높은 순으로 정렬하면 거주지별 매출액을 파악하기 용이합니다.

⭕ 중복된 출력 값 제거하기
SQL 연산이나 보고서를 작성할 때 데이터 값의 행이 중복되었다면 중복된 데이터를 제거하고 출력해야 합니다.
이럴때 사용하는 명령어가 DISTINCT입니다.

⭕ DISTINCT
[DISTINCT 열 이름]
- 중복된 행을 제거하고 싶은 열 앞에 DISTINCT 명령어를 기술합니다. 
- DISTINCT명령어 뒤에 열 이름을 계속 나열하면 나열한 순서대로 DISTINCT가 모두 적용되므로 유의합니다.

⭕ SQL문을 효율적으로 작성하기 위해 별칭 사용하기
SELECT문의 결과를 출력할 때 일반적으로 열 이름은 테이블을 정의할 때 명명한 열의 제목을 출력합니다.
원래 명명된 열 이름 외에 열 이름으로 임의로 바꿔 쓰고자 할 때 사용하는 것이 별칭 (alias)

✔ AS
열 이름을 변경하려면 AS 접속사를 사용합니다. 단, SELECT 문에 기술할 때는 AS접속사를 생략하고 바로 별칭을 기술할 수도 있습니다.
실제로 SQL문이 익숙해지면 AS 접속사를 종종 생략하곤 하지만, 가독성이 필요한 SQL문에서는 AS 접속사를 사용하기를 권장합니다.
[SELECT 열 이름 AS 별칭] [SELECT students AS st]

✔ 별칭의 특징
- 별칭은 열 이름을 임시로 변경하는데 사용합니다. 원래의 열 이름이 물리적으로 영원히 변경되는 것은 아닙니다.
- 별칭은 열 이름 바로 뒤에 사용하며, 열 이름과 별칭 사이에는 AS 접속사를 넣습니다.
- AS 접속사는 생략할 수 있습니다.
- 별칭에 공백, 특수문자, 대소문자 등을 사용하려면 "Emp Id"처럼 큰 따옴표로 묶어서 사용합니다.

[example]
employees 테이블에서 employee_id는 '사원번호', first_name은 '이름', last_name은 '성'으로 출력하세요
SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성 FROM employees;

⭕ 데이터 값 연결하기
각 열에 따로 담겨 있는 데이터 값을 하나로 붙이거나 추가 수식을 붙여 출력하는 겨웅가 있습니다.
이럴때 사용하는 것이 연결 연산자인 || 입니다.

✔ 연결연산자 ||
연결 연산자인 ||를 사용하면 각 열의 결과를 연결해 하나의 열로 결과를 표현할 수 있고,
문자열을 추가해 새로운 데이터를 표현하는 열을 만들 수도 있습니다.
[열 이름] || [열 이름] or [열 이름] || '[문자]' <- 문자를 붙일 때는 작은따옴표를 사용

[example-1]
employees 테이블에서 employee_id를 출력하고 first_name과 last_name을 붙여서 출력하세요.
SELECT employee_id, first_name || last_name FROM employees;

예제 1번은 first_name컬럼과 last_name컬럼이 연결되어 출력됩니다.
문자열 값을 붙여서 데이터를 조작해보겠습니다.

[example-2]
employees 테이블에서 employee_id를 출력하고 first_name과 last_name을 붙여서 출력하되 한 칸을 띄어주세요.
다음 열에는 email을 출력하되 @company.com문구를 붙여서 출력하세요.
SELECT employee_id, first_name ||' ' || last_name, email || '@' || 'company.com' FROM employees;

연결연산자와 함께 first_name과 last_name 사이에 작은따옴표를 사용해서 한 칸 띄웠습니다.
email열에는 @company.com이라는 데이터 값을 추가하였습니다. 작은따옴표 사이에 들어가는 값을 문자열이라고 하는데,
연결 연산자와 함께 작은따옴표 사이에 숫자, 문자, 특수문자를 넣어서 데이터를 다양하게 표현할 수 있습니다.
이런 작업을 통해 데이터를 한결 보기 좋게 만들 수 있습니다.

⭕ 산술 처리하기 : 데이터 값끼리 계산
데이터를 사전에 가공하거나 리포트를 작성할 목적으로 데이터 값끼리 계산하려면 산술 연산자를 사용해야 합니다.
산술 연산은 숫자를 계산한다는 의미입니다.

✔ 산술 연산자
산술 연산자는 데이터 값을 계산하고자 할 때 사용합니다. 산술 표현식에는 열 이름, 숫자, 날짜, 산술 연산자 등을 포함할 수 있으며,
산술 연산자에는 +, -, *, / 가 있습니다. SELECT 문에서는 FROM 절을 제외한 모든 절에서 산술 연산자를 사용할 수 있습니다.
수학의 일반적인 계산과 마찬가지로 연산의 우선순위는 (), *, / +, - 순 입니다.

[example-1]
employees테이블에서 employee_id, salary, salary에 500을 더한 값, 100을 뺀 값, 10%를 추가해서 2로 나눈값을 출력하세요.
SELECT employee_id, salary, salary+500, salary-100, (salary*1.1) / 2  FROM employees;

이 에제는 employees 테이블에 있는 employee_id의 각 salary 데이터 값에 대해 더하기, 빼기, 곱하기, 나누기를 한 것이빈다.
마지막 열에 들어갈 곱하기와 나누기 구문은 소괄호 (())를 이용하여 연산의 우선순위를 지정했습니다. 즉, 1.1을 곱한 후 2로 나눕니다.

별칭을 이용해보겠습니다.

[example-2]
employees테이블에서 employee_id를 '사원번호', salary를 '급여', salary에 500을 더한 값을 '추가급여', 100을 뺀 값을 '인하급여', 10%를 추가해서 2로 나눈값을 '조정급여'로출력하세요.
SELECT employee_id AS '사원번호', salary AS '급여', salary + 500 AS '추가급여', salary - 100 AS '인하급여', (salary * 1.1) / 2 AS '조정급여' FROM employees;
