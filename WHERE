지금까지는 열을 조회하고 정렬하는 방법을 알아보았습니다.
이번에는 행의 특정 데이터 값을 조회하거나 비교하여 연산 처리하는 방법을 알아보겠습니다.

사용자가 원하는 데이터를 조회할 때 사용하는 것이 WHERE절입니다.
WHERE라는 단어에서 알 수 있듯이 조건을 지정해 데이터 값을 '어디에서 어떻게' 가져올지 정합니다.
WEHRE절은 FROM 절 바로 다음에 기술하며 수행될 조건식을 포함합니다. 수행될 조건 절에는 연산자, 열이름, 표현식, 숫자, 문자 등을 포함시킬 수 있습니다.

✅ WHERE절의 주요 특징
1. WHERE절을 사용하여 조회하려는 조건을 지정할 수 있습니다.
2. WHERE절은 FROM 절 다음에 위치합니다.
3. 수행될 조건 절에는 비교 연산자, SQL 연산자, 논리 연산자, 열 이름, 표현식, 숫자, 문자 등을 쓸 수 있습니다.

✅ 
SELECT 열 이름
FROM 테이블 이름
WHERE 원하는 조건

데이터가 조회되는 논리 순서를 살펴봅니다.
1. 참조하려는 테이블로부터 (FROM)
2. 해당 조건식으로(WHERE)
3. 열을 선택하여 조회합니다. (SELECT)

where절에는 연산자를 같이 쓸 수 있는데, 연산자는 operator라는 의미 그대로 데이터 값을 조작하는 데 사용됩니다.
복잡한 조건을 만족하는 sql문을 작성하려면 다양한 연산자를 사용해야 합니다.
예를 들어 '회계부서에 근무하는 직원 중에 급여가 1,00만원이 넘으면서 2년 이상 근무한 사람을 출력하세요'라는 다중 조건을 쓰려면
사용자는 여러가지 연산자를 사용해야 합니다. 연산자는 크게 비교 연산자, sql연산자, 논리 연산자로 구분할 수 있습니다.

✔ 연산자 종류
비교 연산자 | 조건을 비교 | =, <, > 등
SQL 연산자 | 조건 비교를 확장 | BETWEEN, IN 등
논리 연산자 | 조건 논리를 비교 | AND, OR 등

연산자의 우선순위는 다음과 같습빈다.
- 괄호 > 부정연산 > 비교연산 > SQL 연산
- 논리 연산자는 NOT, AND, OR순으로 처리됩니다.

연산자의 순서는 데이터 조회 속도에 영향을 줄 수 있습니다.

✅ 비교 연산자 : 비교 조회 조건 주기
비교 연산자는 다양한 조건을 적용하여 사용자가 원하는 결과를 얻을 수 있습니다.

✔ 비교 연산자의 종류
=       | 같다
<> (!=) | 같지 않다
>       | 보다 크다
>=      | 보다 크거나 같다
<       | 보다 작다
<=      | 보다 작거나 같다 

✔ 등호 연산자 =
특정 데이터 값을 선택할 때 주로 사용하는 연산자는 '같다'라는 의미를 가진 등호 연산자인 = 입니다.
WHERE절 다음에 열 이름 = 데이터 값 형식으로 기술하면 됩니다.

[example-3-10]
employee_id가 100인 직원정보를 출력하세요
SELECT * FROM employees WHERE employee_id = 100;

숫자는 이 예제 처럼 = 연산자 뒤에 별다른 처리 없이 입력하면 됩니다.
반면 데이터 값이 문자 값이나 날짜 값이라면 WHERE first_name = 'David'와 같이 작은 따옴표를 조건 데이터 값에 붙여서 사용합니다.
이런 경우에는 대소문자와 날짜 형식을 구분합니다.

[example-3-11]
employees테이블에서 first_name이 David인 직원 정보를 출력하세요.
SELECT * FROM employees WHERE first_name = 'David';

작은 따옴표를 사용했으므로 문자값 'David'와 'david'는 다른 의미입니다. (다른 결과)

✅ 부등호 연산자 >=
>= 연산자는 '크거나 같을 경우', 즉 '~이상'이라는 의미입니다. 

[example-3-12]
employees테이블에서 employee_id가 105 이상인 직원 정보를 출력하세요.
SELECT * FROM employees WHERE employee_id >= 105;

✅ SQL연산자 : 조회 조건 확장하기

✔ SQL연산자 종류
BETWEEN a AND b | a와 b사이에 값이 있다.(a, b 포함)
IN(list)        | list중 어느 값이라도 일치한다.
LIKE '비교문자'  | 비교 문자와 형태가 일치한다. (%, _ 사용)
IS NULL         | null 값을 찾는다

✔ BETWEEN 연산자
두 값의 범위에 해당하는 행을 출력할 때 사용 합니다.
a이상 b이하의 값을 조회하라는 의미로 >=, <=연산자를 함께 사용한 것과 같습니다.

[example-3-13]
employees테이블에서 salary가 10,000 이상이고 20,000 이하인 직원정보를 출력하세요.
SELECT * FROM employees WHERE salary BETWEEN 10000 AND 20000;

✔ IN 연산자
조회하고자 하는 데이터 값이 여러 개일 때 사용합니다.
= 연산자와 유사하지만 = 연산자는 조회 조건으로 데이터 값을 하나만 지정할 수 있는데 반해 IN연산자는 데이터 값을 여러 개,
즉 목록(list)으로 지정할 수 있습니다. 여러 개의 값 목록 중에서 하나의 값이라도 만족하면 조건에 해당하는 결과를 출력합니다.
이러한 연산자를 다중 행 연사나라고도 부릅니다.

[example-3-14]
employees테이블에서 salary가 10000, 17000, 24000 인 직원 정보를 출력하세요.
SELECT * FROM employees WHERE salary IN (10000, 17000, 24000);

✔ LIKE 연산자
조회 조건 값이 명확하지 않을 때 사용합니다. LIKE연산자는 '~와 같다'라는 의미
- LIKE 연산자는 %와 _와 같은 기호 연산자(wild card)와 함께 사용
- 조건에는 문자나 숫자를 포함할 수 있습니다.
- %는 '모든 문자'이고, _는 '한 글자'라는 의미

[example-3-15]
employees테이블에서 job_id값이 AD를 포함하는 모든 데이터를 조회하세요.
SELECT * FROM employees WHERE job_id LIKE '%AD%';

[example-3-16]
employees테이블에서 AD를 포함하면서 AD 뒤에 따라오는 문자열이 3자리인 데이터 값을 갖는 직원 정보를 조회하세요 (AD + 3자리 데이터 값)
SELECT * FROM employees WHERE job_id LIKE 'AD___';

✔ IS NULL 연산자
데이터 값이 NULL인 경우를 조회하고자 할 때 사용, NULL은 값이 지정되지 않았기 때문에 값이 없어 알 수 없는 값을 말하빈다.
NULL은 0, 공백과는 다릅니다. 0은 숫자값이고 공백은 문자 값이므로 다른 유형의 데이터 값입니다.

[example-3-17]
employees테이블에서 manager_id가 null 값인 직원 정보를 출력해 보세요.
SELECT * FROM employees WHERE manager_id IS NULL;

✅ 논리 연산자 : 조건 논리를 계속 연결하기
논리 연산자는 여러 조건을 논리적으로 연결할 때 사용하는 연산자입니다. SQL문의 조건을 계속 추가해야 할 때 필수 연산자입니다.

✔ 논리 연산자 종류
AND | 기술 순서로 봤을 때 앞의 조건과 뒤의 조건이 동시에 참이어야 참이다. 즉, 앞뒤 조건을 동시에 만족해야함
OR  | 앞의 조건이 참이거나 뒤의 조건이 참인 경우, 즉 한쪽이라도 참이면 참이다
NOT | 뒤어 조건에 대해 반대 결과를 반환한다.

[example-3-18]
employees테이블에서 salary가 4000을 초과하면서, job_id가 IT_PROG인 값을 조회하세요.
SELECT * FROM employees WHERE salary > 4000 AND job_id = 'IT_PROG';

논리 연산자를 통해 조건식을 계속 붙여 만든 절을 조건 절이라고 하는데, 조건 절은 SQL문에서 보통 WHERE이하의 절을 말합니다.

[example-3-19]
employees테이블에서 salary가 4000을 초과하면서, job_id가 IT_PROG이거나 FI_ACCOUNT인 경우를 조회하세요.
SELECT * FROM employees WHERE salary > 4000 AND job_id = 'IT_PROG' OR job_id = 'FI_ACCOUNT';

OR연산자는 대용량 데이터베이스에서 조회 성능에 많은 영향을 줄 수 있으므로 주의해서 사용합니다.

NOT연산자는 조건을 부정으로 만드는 역할을 하기 때문에 부정 연산자로 불립니다.
부정 연산자에는 부정'비교 연산자'와 부정 'SQL연산자가'있습니다.

✔ 부정연산자 종류
!=                  | 같지 않다.
<>                  | 같지 않다(ISO 표준).
NOT 열 이름 =       | ~와 같지 않다
NOT 열 이름 >       | ~보다 크지 않다.
NOT BETWEEN a AND b | a와 b사이에 값이 없다
NOT IN (list)       | list 값과 일치하지 않는다.
IS NOT NULL         | null 값을 갖지 않는다.


[example-3-20]
employees테이블에서 employee_id가 105가 아닌 직원을 조회하세요.
SELECT * FROM employees WHERE employee_id <> 105;

[example-3-21]
employees테이블에서 manager_id가 null값이 아닌 직원을 조회하세요.
SELECT * FROM employees WHERE manager_id IS NOT NULL;